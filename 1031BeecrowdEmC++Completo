#include <iostream>
#include <vector>
#include <algorithm>

using namespace std;

int main() {
    int teste; // teste de quantas cidades existem
    do {
        vector<int> antigos; // Lista com as cidades que já foram
        int salto = 0, valor = 1;
        cin >> teste;
        if (teste <= 0) { // caso o teste seja <=0, sairá do teste de repetição
            break;
        }
        vector<int> valores(teste, 0);
        for (int i = 1; i <= teste; i++) {
            valores[i-1] = i;// Adiciona de 1 até o número de regiões
        }
        antigos.clear();// Serve para repetições -> zerar sempre
        antigos.push_back(1);// a região i é sempre a primeira, então já colocamos como garantida.
        while (antigos.back() != 13) { // Repetimos enquanto a última posição não seja igual a 13
            salto++;
            valor = 1;
            do {
                for (int k = 0; k < salto; k++) { // Uma repetição que vai somar por vez até atingir o limite do salto
                    valor++;
                    if (valor > valores.size()) {
                        valor -= valores.size(); // volta para o inicio
                    }
                    while (find(antigos.begin(), antigos.end(), valor) != antigos.end()) {// enquanto houver os valores que já foram
                        valor++;// adiciona mais um
                        if (valor > valores.size()) {// mesma situação já apresentada de voltar para o inicio do vetor
                            valor -= valores.size();
                        }
                    }

                }
                antigos.push_back(valor); // Adiciona valor nos antigos
            } while (antigos.size() < valores.size());
            // Vamos adicionar valores nos antigos até
            // que haja o mesmo tanto de valores em antigos e valores
            if (antigos.back() == 13) {
                break;// Caso o último valor de antigos for igual a 13, podemos sair da repetição
            }
            antigos.clear(); // Caso não tenha encontrado, zeramos para começar de novo
            antigos.push_back(1);
        }
        cout << salto << endl; // mostra o salto em que foi encontrado o 13 na última posição
    } while (teste != 0); // repete enquanto o valor for diferente de 0
    return 0;
}
