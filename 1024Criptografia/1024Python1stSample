def criptografar(mensagem):
    # primeira passada
    mensagem_codificada = ''
    for letra in mensagem:
        if letra.isalpha():
            nova_letra = chr(ord(letra) + 3)
            if not nova_letra.isalpha():
                nova_letra = chr(ord(nova_letra) - 26)
        else:
            nova_letra = letra
        mensagem_codificada += nova_letra
    
    # segunda passada
    mensagem_codificada = mensagem_codificada[::-1]
    
    # terceira passada
    metade = len(mensagem_codificada) // 2
    mensagem_codificada = mensagem_codificada[:metade] + \
                          ''.join(chr(ord(letra) - 1) if letra.isalpha() else letra for letra in mensagem_codificada[metade:])
    
    return mensagem_codificada


n = int(input())

for i in range(n):
    linha = input().strip()
    mensagem_codificada = criptografar(linha)
    print(mensagem_codificada)

'''
As funções nativas usadas no programa são as seguintes:

    chr(): é uma função embutida que retorna a string que representa um caractere cujo código ASCII é o valor de entrada.

    ord(): é uma função embutida que retorna o valor inteiro do código ASCII do caractere de entrada.

    isalpha(): é um método embutido que retorna True se todos os caracteres em uma string são letras, caso contrário, retorna False.

    join(): é um método embutido que concatena uma lista de strings em uma única string, usando o objeto que chama o método como separador 
    entre as strings.

    strip(): é um método embutido que remove todos os espaços em branco iniciais e finais de uma string.

O programa recebe uma mensagem como entrada e a criptografa usando um algoritmo de três passos. Na primeira passada, cada letra na mensagem é deslocada 
três posições no alfabeto. Na segunda passada, a mensagem é invertida. Na terceira passada, a segunda metade da mensagem (após a inversão) 
é deslocada uma posição para trás no alfabeto. A mensagem criptografada resultante é retornada pela função criptografar().
'''
