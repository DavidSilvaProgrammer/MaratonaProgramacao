def is_prime(num):
    if num < 2:
        return False
    for i in range(2, int(num ** 0.5) + 1):
        if num % i == 0:
            return False
    return True

n = int(input("Quantos números primos deseja imprimir? "))
count = 0
num = 2

while count < n:
    if is_prime(num):
        print(num)
        count += 1
    num += 1
    
    /*
    
    A função is_prime recebe um número como entrada e retorna True se o número é primo e 
    False caso contrário. Em seguida, o programa solicita ao usuário quantos números primos 
    deseja imprimir. O contador count é usado para controlar quantos números primos foram 
    impressos até agora. O laço while continua a procurar números primos até que count seja igual 
    ao número solicitado pelo usuário. Quando um número primo é encontrado, ele é impresso na 
    tela e o contador count é incrementado.
    
    */
    
    /*
    Claro, vou explicar essa linha em detalhes!

Essa linha está dentro da função is_prime(num) e é usada para determinar se um número num é primo ou não.

A linha int(num ** 0.5) calcula a raiz quadrada inteira de num. Por exemplo, se num for 16, essa expressão 
retornará 4, que é a raiz quadrada inteira de 16.

Em seguida, adicionamos 1 ao resultado da expressão int(num ** 0.5). Isso é feito porque se num for um número 
quadrado perfeito (ou seja, um número que é o quadrado de outro número inteiro), como 4, 9, 16, 25, etc., 
a expressão int(num ** 0.5) retornará o fator primo mais alto de num. Nesses casos, se não adicionarmos 1 
ao resultado, não testaremos o número num corretamente.

Por exemplo, se num for 16, a expressão int(num ** 0.5) + 1 retornará 5. Isso significa que a função is_prime(num) 
testará se num é divisível por 2, 3, 4 ou 5.

Finalmente, o for itera sobre todos os números de 2 até int(num ** 0.5) + 1. Se num for divisível por 
algum desses números, a função retorna False, pois num não é primo. Se nenhum desses números divide num, 
a função retorna True, indicando que num é primo.

 */


/*

Vou tentar explicar de uma forma mais simples.

A linha int(num ** 0.5) é usada para calcular a raiz quadrada inteira de num. Essa operação é importante porque é 
possível determinar se um número é primo verificando se ele é divisível por algum número menor ou igual à sua raiz quadrada.

Por exemplo, se queremos verificar se o número 49 é primo, não precisamos verificar se ele é divisível por 2, 3, 4, 5, 6, 7 ou 8. 
Basta verificar se ele é divisível por 2, 3, 4, 5, 6 ou 7. Isso ocorre porque a raiz quadrada de 49 é 7, e qualquer número maior 
que 7 não pode ser um fator primo de 49.

Adicionamos 1 ao resultado da linha int(num ** 0.5) para garantir que o último número testado seja a raiz quadrada 
arredondada para cima. Isso é importante porque se o número for um quadrado perfeito, a raiz quadrada sem arredondamento 
pode ser um fator primo. Por exemplo, se quisermos verificar se o número 16 é primo, a raiz quadrada é 4, que é um fator 
primo de 16. Se adicionarmos 1 a 4, obtemos 5, que é o último número que precisamos testar.

*/
