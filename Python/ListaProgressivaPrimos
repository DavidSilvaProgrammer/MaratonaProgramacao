def is_prime(num):
    if num < 2:
        return False
    for i in range(2, int(num ** 0.5) + 1):
        if num % i == 0:
            return False
    return True

n = int(input("Quantos números primos deseja imprimir? "))
count = 0
num = 2

while count < n:
    if is_prime(num):
        print(num)
        count += 1
    num += 1
    
    /*
    
    A função is_prime recebe um número como entrada e retorna True se o número é primo e 
    False caso contrário. Em seguida, o programa solicita ao usuário quantos números primos 
    deseja imprimir. O contador count é usado para controlar quantos números primos foram 
    impressos até agora. O laço while continua a procurar números primos até que count seja igual 
    ao número solicitado pelo usuário. Quando um número primo é encontrado, ele é impresso na 
    tela e o contador count é incrementado.
    
    */
    
    /*
    Claro, vou explicar essa linha em detalhes!

Essa linha está dentro da função is_prime(num) e é usada para determinar se um número num é primo ou não.

A linha int(num ** 0.5) calcula a raiz quadrada inteira de num. Por exemplo, se num for 16, essa expressão 
retornará 4, que é a raiz quadrada inteira de 16.

Em seguida, adicionamos 1 ao resultado da expressão int(num ** 0.5). Isso é feito porque se num for um número 
quadrado perfeito (ou seja, um número que é o quadrado de outro número inteiro), como 4, 9, 16, 25, etc., 
a expressão int(num ** 0.5) retornará o fator primo mais alto de num. Nesses casos, se não adicionarmos 1 
ao resultado, não testaremos o número num corretamente.

Por exemplo, se num for 16, a expressão int(num ** 0.5) + 1 retornará 5. Isso significa que a função is_prime(num) 
testará se num é divisível por 2, 3, 4 ou 5.

Finalmente, o for itera sobre todos os números de 2 até int(num ** 0.5) + 1. Se num for divisível por 
algum desses números, a função retorna False, pois num não é primo. Se nenhum desses números divide num, 
a função retorna True, indicando que num é primo.

 */


/*

Vou tentar explicar de uma forma mais simples.

A linha int(num ** 0.5) é usada para calcular a raiz quadrada inteira de num. Essa operação é importante porque é 
possível determinar se um número é primo verificando se ele é divisível por algum número menor ou igual à sua raiz quadrada.

Por exemplo, se queremos verificar se o número 49 é primo, não precisamos verificar se ele é divisível por 2, 3, 4, 5, 6, 7 ou 8. 
Basta verificar se ele é divisível por 2, 3, 4, 5, 6 ou 7. Isso ocorre porque a raiz quadrada de 49 é 7, e qualquer número maior 
que 7 não pode ser um fator primo de 49.

Adicionamos 1 ao resultado da linha int(num ** 0.5) para garantir que o último número testado seja a raiz quadrada 
arredondada para cima. Isso é importante porque se o número for um quadrado perfeito, a raiz quadrada sem arredondamento 
pode ser um fator primo. Por exemplo, se quisermos verificar se o número 16 é primo, a raiz quadrada é 4, que é um fator 
primo de 16. Se adicionarmos 1 a 4, obtemos 5, que é o último número que precisamos testar.

*/

/*

Um fator primo de um número inteiro é um número primo que pode ser multiplicado por outros números inteiros 
para obter esse número. Em outras palavras, um fator primo é um número que é um divisor exato do número 
original e que é ele mesmo um número primo.

Por exemplo, os fatores primos de 12 são 2, 2 e 3. Isso ocorre porque 2 x 2 x 3 = 12 e 2 e 3 são números primos. 
Portanto, os fatores primos de 12 são 2 e 3.

Os fatores primos são importantes na teoria dos números, pois podem ser usados para decompor um número inteiro em 
seus fatores primos. Essa decomposição é chamada de fatoração em números primos e é útil em muitas áreas 
da matemática e da ciência, incluindo criptografia, teoria dos números e álgebra.

*/

/*

Na linha for i in range(2, int(num ** 0.5) + 1):, o valor 2 é usado como o primeiro valor para o range. 
Isso ocorre porque o número 1 não é considerado um número primo, então não precisamos testá-lo. 
Além disso, se começarmos o range com o número 2, podemos evitar a verificação de números pares maiores que 2, 
que não podem ser números primos, já que são divisíveis por 2.

Portanto, começamos a testar a divisibilidade de num a partir do número 2. E, como mencionado anteriormente, 
terminamos o range no número int(num ** 0.5) + 1, pois esse é o maior fator possível que pode dividir num e 
ainda ser menor ou igual à sua raiz quadrada. Isso ocorre porque, se um número n for maior que a raiz 
quadrada de num e puder dividir num, então num/n seria um fator menor que a raiz quadrada de num, que já 
teríamos verificado. Portanto, não precisamos testar números maiores que int(num ** 0.5) + 1.
*/

Na linha for i in range(2, int(num ** 0.5) + 1):, adicionamos 1 ao resultado da raiz quadrada de num 
para garantir que o último número testado seja a raiz 
quadrada arredondada para cima. Isso é importante porque se o número for um quadrado perfeito, 
a raiz quadrada sem arredondamento pode ser um fator primo.

Por exemplo, se quisermos verificar se o número 16 é primo, a raiz quadrada é 4, que é um fator primo de 16. 
Se adicionarmos 1 a 4, obtemos 5, que é o último número que precisamos testar. Se não adicionássemos 
1 ao resultado da raiz quadrada, não testaríamos o fator primo 4 e, portanto, erroneamente concluiríamos 
que 16 é um número primo.

Adicionando 1 ao resultado da raiz quadrada garantimos que estamos testando todos os possíveis 
fatores primos menores ou iguais à raiz quadrada de num, incluindo o caso especial em que a raiz quadrada é um número inteiro.

*/

Para entender por que o último número testado no algoritmo de verificação de números primos deve ser a raiz 
quadrada arredondada para cima, é importante entender que qualquer número inteiro maior que 1 que não 
seja primo pode ser fatorizado em fatores primos. Esses fatores primos serão sempre menores ou iguais à 
raiz quadrada do número em questão.

Por exemplo, se quisermos fatorizar o número 24, podemos dividi-lo pelos menores números primos maiores que 1, 
começando com o número 2: 24 ÷ 2 = 12, 12 ÷ 2 = 6, 6 ÷ 2 = 3. Portanto, os fatores primos de 24 são 2, 2, 2 e 3. 
Observe que a raiz quadrada de 24 é aproximadamente 4,9, e todos os seus fatores primos são menores ou iguais a 4.

Com base nesse exemplo, podemos concluir que, se um número inteiro num não for primo, então ele terá pelo menos 
um fator primo p menor ou igual a sua raiz quadrada sqrt(num). Portanto, quando estamos testando se num é primo, 
só precisamos verificar se ele é divisível por números primos menores ou iguais a sqrt(num).

No entanto, se não arredondarmos a raiz quadrada sqrt(num) para cima, podemos perder um fator primo especial: 
a própria raiz quadrada. Se sqrt(num) for um número inteiro, então ele é um fator primo de num e não será testado 
se não arredondarmos para cima. Por exemplo, se num for 16, a raiz quadrada é 4, que é um fator primo de 16. 
Se não arredondarmos 4 para cima, não testaremos o fator primo 4 e erroneamente concluiríamos que 16 é um número primo.

Portanto, para garantir que todos os possíveis fatores primos de num sejam testados, o último número testado 
no algoritmo deve ser a raiz quadrada arredondada para cima, usando a função ceil da biblioteca math, 
por exemplo. Isso garantirá que a raiz quadrada seja incluída no conjunto de possíveis fatores primos a serem testados.
